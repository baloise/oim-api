openapi: "3.0.0"

info:
  title: Baloise OIM API
  version: "0.8"
servers:
  - url: /v0.8

paths:
  /order/{id}:
    get:
      summary: "show the order status"
      description: "is made to display the order status"
      operationId: api.calls_phs.order_get
      tags:
        - orders
      responses:
        200:
          description: "order status"
        404:
          description: "Specified order not found"
      parameters:
        - name: id
          in: path
          description: "the orderid from the original order"
          required: true
          schema:
            type: string
            example: "order123"

  /order/{id}/details:
    get:
      summary: "show the order details"
      description: "is made to display the order details"
      operationId: api.calls_phs.order_get_detail
      tags:
        - orders
      responses:
        200:
          description: "order details"
        404:
          description: "Specified order not found"
      parameters:
        - name: id
          in: path
          description: "the orderid from the original order"
          required: true
          schema:
            type: string
            example: "order123"

  /vm:
    get:
      summary: Lists all known vm's
      description: Lists all known vm's
      operationId: api.calls_phs.vm_list
      tags:
        - VMs
      responses:
        200:
          description: TODO
        404:
          description: "Response for unknown resource"
      parameters:
        - name: filter
          in: query
          description: "Filter to apply to results"
          required: false
          schema:
            type: string
            example: "TODO: What pattern can we use?"
            default: ".*"
        - name: limit
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            example: 100
            default: 25
            maximum: 999
            minimum: 1
    post:
      summary: "Requests new vm"
      description: "returns orderid, optionally accepts customer-reference"
      operationId: api.calls_phs.vm_post
      tags:
        - VMs
      responses:
        202:
          description: "Creation request accepted"
        400:
          description: "Bad request parameters."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/vm-order"
  /vm/{name}:
    get:
      summary: "Request information on a specific VM"
      description: "Request information on a specific VM"
      operationId: api.calls_phs.vm_get
      tags:
        - VMs
      responses:
        200:
          description: "JSON object containing available information on the requested resource"
        404:
          description: "Response for unknown resource"
      parameters:
        - name: name
          in: path
          description: "todo"
          required: true
          schema:
            type: string
            example: "vm identifier"
    delete:
      summary: "requests removal of specified resource"
      description: "requests removal of specified resource"
      operationId: api.calls_phs.vm_delete
      tags:
        - VMs
      responses:
        202:
          description: "Removal request accepted"
        404:
          description: "Response for unknown resource"
      parameters:
        - name: name
          in: path
          description: "name of the VM to request deletion for"
          required: true
          schema:
            type: string
            example: "todo"
    patch:
      summary: "Allows the modification of SOME modifiable parameter"
      description: "Allows the modification of SOME modifiable parameter"
      operationId: api.calls_phs.vm_patch
      tags:
        - VMs
      responses:
        '202':
          description: "Update request accepted"
        400:
          description: "Bad request"
        404:
          description: "Response for unknown resource"
        409:
          description: "update failed"
      parameters:
        - name: name
          in: path
          description: "Name of the VM to modify"
          required: true
          schema:
            type: string
            example: "vmbal2021"

  /dbpg:
    get:
      summary: "Lists all known databases"
      description: "Return a list of databases based on given filter"
      operationId: api.calls_phs.pgsql_list
      tags:
        - DB
        - pgsql
      responses:
        200:
          description: "Filtered Ã¶ist of pgsql databases"
        404:
          description: "Response for unknown resource"
      parameters:
        - name: filter
          in: query
          description: "Filter to apply to results"
          required: false
          schema:
            type: string
            example: "DB*"
            default: ".*"
        - name: limit
          in: query
          description: "The number of items to return"
          required: false
          schema:
            type: integer
            example: 100
            default: 25
            maximum: 999
            minimum: 1
    post:
      summary: "Requests new database"
      description: "returns orderid, optionally accepts customer-reference"
      operationId: api.calls_phs.pgsql_post
      tags:
        - DB
        - pgsql
      responses:
        202:
          description: "Resource creation request accepted"
        400:
          description: "Bad request parameters."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order-database"

  /dbpg/{dbid}:
    get:
      summary: "Request information on a specific database"
      description: "List details on a given database item"
      operationId: api.calls_phs.pgsql_get
      tags:
        - DB
        - pgsql
      responses:
        200:
          description: "List details for a database item"
        404:
          description: "Response for unknown resource"
      parameters:
        - name: dbid
          in: path
          description: "database identifier"
          required: true
          schema:
            type: string
            example: "DB1"
    patch:
      summary: "Allows the modification SOME modifiable parameter for a database"
      description: "The modification workflow is still in discussion with provider."
      operationId: api.calls_phs.pgsql_patch
      tags:
        - DB
        - pgsql
      responses:
        202:
          description: "Update request accepted"
        400:
          description: "Bad request"
        404:
          description: "Response for unknown resource"
        409:
          description: "Conflicting information"
      parameters:
        - name: dbid
          in: path
          required: true
          schema:
            type: string
            example: "DB1"
    delete:
      summary: "Requests removal of specified resource"
      description: "Remove a database identified by database identifier"
      operationId: api.calls_phs.pgsql_delete
      tags:
        - DB
        - pgsql
      responses:
        202:
          description: "Removal request accepted"
        404:
          description: "Response for unknown resource"
      parameters:
        - name: dbid
          in: path
          description: "given database identifier to remove"
          required: true
          schema:
            type: string
            example: "DB1"

  /jb:
    post:
      summary: Requests new jboss server
      description: returns order id, optionally accepts customer-reference
      operationId: api.calls_phs.jb_post
      tags:
        - Middlewares
        - JBoss
      responses:
        201:
          description: order response
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/jboss-order"

components:
  schemas:
    order-database:
      type: object
      properties:
        database-name:
          type: string
          example: "DB01"
        database-user:
          type: string
          example: "L000001"
        database-rolls:
          type: string
          example: "baloise-devops"
        database-platform:
          type: string
          enum:
            - shared
            - dedicated
          example: "dedicated"
        requester-id:
          $ref: "#/components/schemas/user-id"
        requester-mail:
          $ref: "#/components/schemas/user-mail"
        database-stuff:
          $ref: "#/components/schemas/dbitem"
        items:
          type: array
          items:
            $ref: "#/components/schemas/order-common"
      example: >
        {
          "items": [
            {
              "database-name": "DB01",
              "database-user": "L000001",
              "database-rolls": "baloise-devops",
              "database-platform": "shared",
              "deputy-id": "b123456",
              "deputy-mail": "b123456@js.on",
              "owner-id": "b123456",
              "owner-mail": "b123456@js.on",
              "sbu": "CH-BCH",
              "catalog-reference": "PGSQL01",
              "size": "S1",
              "role": "APP",
              "metal-category": "Basic",
              "environment": "Test",
              "application-id": "_A01",
              "security-zone": "_Z1",
              "group-permissions": [
                { 
                  "ad-group-name": "f_adm",
                  "local-group-name": "Power User"
                }
              ],
                "data-disk": {
                "filesystem": "/data",
                "size-gb": 1
              }
            }
          ],
          "requester-id": "b123456"
        }

    listdatabase:
      type: object
      properties:
        filter:
          type: string
          description: "Allows limitation of list result"
          default: ".*"
          example: "todo"
        limit:
          type: integer
          description: "Limit the list of elements"
          default: 10
          example: "50"
      example: >
        {
          "items": [
            {
              "filter": "DB*",
              "limit": 5
            }
          ]
        }
    virtual-machine-list-response:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/vmitem"
    order:
      type: object
      properties:
        requester-id:
          $ref: "#/components/schemas/user-id"
        requester-mail:
          $ref: "#/components/schemas/user-mail"
        items:
          type: array
          items:
            $ref: "#/components/schemas/order-common"
    order-common:
      type: object
      properties:
        allOf:
          oneOf:
            - $ref: "#/components/schemas/vmitem"
        owner-id:
          $ref: "#/components/schemas/user-id"
        owner-mail:
          $ref: "#/components/schemas/user-mail"
        deputy-id:
          $ref: "#/components/schemas/user-id"
        deputy-mail:
          $ref: "#/components/schemas/user-mail"
        sbu:
          $ref: "#/components/schemas/sbu"
    dbitem:
      type: object
      properties:
        catalog-reference:
          oneOf:
            - $ref: "#/components/schemas/db.pg.catalog-reference"
        size:
          $ref: "#/components/schemas/size"
        metal-category:
          $ref: "#/components/schemas/metal-category"
        environment:
          $ref: "#/components/schemas/environment"
        security-zone:
          $ref: "#/components/schemas/security-zone"
      example: >
        {
          "catalog-reference": "PGSQL01",
          "size": "S1",
          "metal-category": "Basic",
          "environment": "Test",
          "security-zone": "_Z1"
        }
    vmitem:
      type: object
      properties:
        catalog-reference:
          oneOf:
            - $ref: "#/components/schemas/vm.lin.catalog-reference"
            - $ref: "#/components/schemas/vm.win.catalog-reference"
        size:
          $ref: "#/components/schemas/size"
        role:
          $ref: "#/components/schemas/role"
        metal-category:
          $ref: "#/components/schemas/metal-category"
        environment:
          $ref: "#/components/schemas/environment"
        application-id:
          $ref: "#/components/schemas/application-id"
        security-zone:
          $ref: "#/components/schemas/security-zone"
        group-permissions:
          $ref: "#/components/schemas/group-permissions"
      example: >
        {
          "catalog-reference": "L01",
          "size": "S1",
          "role": "APP",
          "metal-category": "Basic",
          "environment": "Test",
          "application-id": "_A01",
          "security-zone": "_Z1",
          "group-permissions": [
            { 
              "ad-group-name": "f_adm",
              "local-group-name": "Power User"
            }
          ]
        }
    size:
      type: string
      enum:
        - S1
        - M1
        - M2
        - L1
        - L2
        - X1
      example: "{ \"size\": \"S1\" }"
    db.pg.catalog-reference:
      type: string
      enum:
        - PGSQL01
        - PGSQL02
        - PGSQL03
        - PGSQL04
      example: "{ \"catalog-reference\": \"PGSQL01\" }"
    vm.lin.catalog-reference:
      type: string
      enum:
        - L01
        - L02
      example: "{ \"catalog-reference\": \"L01\" }"
    vm.win.catalog-reference:
      type: string
      enum:
        - W01
        - W02
      example: "{ \"catalog-reference\": \"W01\" }"
    role:
      type: string
      enum:
        - APP
        - WEB
        - DB
      example: "{ \"role\": \"APP\" }"
    metal-category:
        type: string
        enum:
          - Basic
          - Advanced
          - Premium
          - Elite
        example: "{ \"metal-category\": \"Basic\" }"
    application-id:
      type: string
      description: "4-letter-max identifier of associated service."
    group-permissions:
      type: array
      items:
        $ref: "#/components/schemas/group-permission"
    group-permission:
      type: object
      required:
        - ad-group-name
        - local-group-name
      properties:
        ad-group-name:
          type: string
        local-group-name:
          type: string  

    jboss-order:
      type: object
      properties:
        requester-id:
          $ref: "#/components/schemas/user-id"
        sbu:
          $ref: "#/components/schemas/sbu"
        items:
          type: array
          items:
            $ref: "#/components/schemas/jboss-order-item"
    jboss-order-item:
      type: object
      properties:
        catalog-reference:
          $ref: "#/components/schemas/jboss-catalog-reference"
        version:
          $ref: "#/components/schemas/jboss-version"
        size:
          $ref: "#/components/schemas/jboss-size"
        metal-category:
          $ref: "#/components/schemas/metal-category"
        environment:
          $ref: "#/components/schemas/environment"
        security-zone:
          $ref: "#/components/schemas/security-zone"
        owner-id:
          $ref: "#/components/schemas/user-id"
        deputy-id:
          $ref: "#/components/schemas/user-id"
        group-permissions:
          type: array
          items:
            $ref: "#/components/schemas/permission-map"
        data-disk:
          $ref: "#/components/schemas/data-disk-linux"
    jboss-catalog-reference:
      type: string
      enum:
        - MP03
    jboss-version:
      type: number
      enum:
        - 7.1
        - 7.2
        - 7.3
    jboss-size:
      type: string
      enum:
        - S1
        - M1
        - M2
        - L1
        - L2
        - X1

    vm-order:
      type: object
      properties:
        requester-id:
          $ref: "#/components/schemas/user-id"
        sbu:
          $ref: "#/components/schemas/sbu"
        items:
          type: array
          items:
            $ref: "#/components/schemas/vm-order-item"
    vm-order-item:
      oneOf:
        - $ref: "#/components/schemas/vm-specifics-linux"
        - $ref: "#/components/schemas/vm-specifics-windows"
      type: object
      properties:
        role:
          $ref: "#/components/schemas/virtual-machine-role"
        size:
          $ref: "#/components/schemas/virtual-machine-size"
        metal-category:
          $ref: "#/components/schemas/metal-category"
        environment:
          $ref: "#/components/schemas/environment"
        security-zone:
          $ref: "#/components/schemas/security-zone"
        owner-id:
          $ref: "#/components/schemas/user-id"
        deputy-id:
          $ref: "#/components/schemas/user-id"
        group-permissions:
          type: array
          items:
            $ref: "#/components/schemas/permission-map"
    virtual-machine-role:
      type: string
      enum:
        - APP
        - WEB
        - DB
    vm-specifics-linux:
      type: object
      properties:
        data-disk:
          $ref: "#/components/schemas/data-disk-linux"
        catalog-reference:
          type: string
          enum:
            - L01
            - L02
    vm-specifics-windows:
      type: object
      properties:
        data-disk:
          $ref: "#/components/schemas/data-disk-windows"
        catalog-reference:
          type: string
          enum:
            - W01
            - W02
    virtual-machine-size:
      type: string
      enum:
        - S1
        - M1
        - M2
        - L1
        - L2
        - X1
    data-disk-linux:
      type: object
      required:
        - filesystem
        - size-gb
      properties:
        filesystem:
          type: string
          pattern: "^(?!/boot|/dev|/dev/.*|/run$)/.*$"
        size-gb:
          type: integer
          minimum: 1
    data-disk-windows:
      type: object
      required:
        - filesystem
        - size-gb
      properties:
        filesystem:
          type: string
          pattern: "^[d-zD-Z]:$"
        size-gb:
          type: integer
          minimum: 1
    permission-map:
      type: object
      required:
        - ad-group-name
        - local-group-name
      properties:
        ad-group-name:
          type: string
        local-group-name:
          type: string
    user-id:
      type: string
      pattern: "^[bB][0-9]{6}$"
    user-mail:
      type: string
      pattern: "[^@ \t\r\n]+@[^@ \t\r\n]+\\.[^@ \t\r\n]+"
    sbu:
      type: string
      enum: 
        - BE
        - CH-BCH
        - CH-SOB
        - DE
        - LI
        - LU-RED
        - LU-YELLOW
        - SHARED
    environment:
        type: string
        enum:
          - Dev
          - Test
          - Int
          - Acc
          - Prod
    security-zone:
      type: string
      enum:
        - PROD
        - PRODR
        - NPROD
        - NPRODR
