openapi: "3.0.0"

info:
  title: Baloise Private OIM API
  version: "0.1"
servers:
  - url: /private/v0.1

paths:
  # /order/info/{id}:
  #   get:
  #     summary: "show the order info"
  #     description: "is made to display the order info"
  #     tags:
  #       - orders
  #     responses:
  #       200:
  #         description: "order info"
  #         content:
  #           text/plain:
  #             schema:
  #               type: string
  #               example: "Order status is: pending/done TODO: Convert this response to a json object"
  #       404:
  #         description: "Specified order not found"
  #         content:
  #           text/plain:
  #             schema:
  #               type: string
  #               example: "Order not found"
  #     parameters:
  #       - name: id
  #         in: path
  #         description: "the orderid from the original order"
  #         required: true
  #         schema:
  #           type: string
  #           example: "order123"

  /order/createminimal:
    post:
      summary: "manually creates a minimal order" 
      description: | 
        This is a private method only used for testing internally. Normally orders are created when
        a resource is ordered. This should never be called directly by customers.
      operationId: api.calls_status.create_minimal_order
      tags:
        - orders
      responses:
        '201':
          description: "order created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    description: The ID of the newly created ordered.
                    example: 23596839285
        '400':
          description: Invalid requestBody
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              x-body-name: orderinfo
              type: object
              properties:
                order_id:
                  type: integer
                  example: 5847646563843
                requester_username:
                  $ref: "#components/schemas/od.username"

  /orchestra/getServicesByName:
    post:
      summary: Retrieves services from orchestra
      operationId: api.calls_orchrequests.get_orchestra_services_by_name
      tags:
        - info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: requestbody
              type: object
              properties:
                pattern:
                  type: string
                  example: "%Windows%"
      responses:
        '200':
          description: Found results

  /status/create:
    post:
      summary: Create a new status entry
      operationId: api.calls_status.create_status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: status
              $ref: "#/components/schemas/Status"
      responses:
        '201':
          description: "status created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusid:
                    type: integer
                    description: The ID of the newly created status
                    example: 23596839285
        '400':
          description: "Invalid requestBody"

  # /status/list:
  #   get:
  #     summary: Retrieve list of statuses for a given order
  #     parameters:
  #       - in: query
  #         name: orderid
  #         required: true
  #         schema:
  #           type: integer
  #           example: 3458735773945
  #     responses:
  #       '200':
  #         description: list of statuses found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ArrayOfStatuses'
  #       '404':
  #         $ref: '#/components/responses/NotFound'

  # /orderitem/list:
  #   get:
  #     summary: lists orderitems belonging to specific order
  #     parameters:
  #       - in: query
  #         name: order_id
  #         required: true
  #         schema: 
  #           type: integer
  #           example: 9475849385747
  #     responses:
  #       '200':
  #         description: 'A list of orderitems belongig to the given order'
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Status'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '404':
  #         $ref: '#/components/responses/NotFound'


  # /order/details/{id}:
  #   get:
  #     summary: "show the order details"
  #     description: "is made to display the order details"
  #     # operationId: api.private.order_details_get
  #     tags:
  #       - orders
  #     responses:
  #       200:
  #         description: "order details"
  #         content:
  #           text/plain:
  #             schema:
  #               type: string
  #               example: "Order details are: ... TODO: Convert this response to a json object"
  #       404:
  #         description: "Specified order not found"
  #         content:
  #           text/plain:
  #             schema:
  #               type: string
  #               example: "Order not found"
  #     parameters:
  #       - name: id
  #         in: path
  #         description: "the orderid from the original order"
  #         required: true
  #         schema:
  #           type: string
  #           example: "order123"


components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Status: 
      type: object
      required:
        - state
        - system
        - orderid
      properties:
        statusid:
          type: integer
          example: 42
        state:
          type: string
          enum:
            - 'NEW'
            - 'VERIFIED'
            - 'BE_PROCESSING'
            - 'BE_DONE'
            - 'BE_FAIL'
            - 'TESTING'
            - 'TEST_FAIL'
            - 'TEST_SUCCESS'
            - 'CMDB_DONE'
            - 'DONE'
          example: 'NEW'
        since:
          type: integer
          description: timestamp
          example: 123945857
        system:
          type: string
          enum:
            - 'ORCHESTRA'
            - 'OURCLOUD'
        orderid:
          type: integer
          description: ID of the order this status belongs to
          example: 384738477583
        payload:
          type: string
          description: Freeform text to contain additional status info
    ArrayOfStatuses:
      type: array
      items:
        $ref: '#/components/schemas/Status'
    od.username:
      type: string
      pattern: "^[bB][0-9]{6}$"
      example: "b000000"
    od.mail:
      type: string
      pattern: "[^@ \t\r\n]+@[^@ \t\r\n]+\\.[^@ \t\r\n]+"
    od.sbu:
      type: string
      enum: 
        - BE
        - CH-BCH
        - CH-SOB
        - DE
        - LI
        - LU-RED
        - LU-YELLOW
        - SHARED
