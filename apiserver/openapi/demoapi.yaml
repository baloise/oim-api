openapi: "3.0.0"

info:
  title: OpenAPI Demo
  version: "1.0"
servers:
  - url: /v1.0

paths:
  /hello:
    get:
      summary: Greet world
      description: Greets the world with a predefined message.
      operationId: api.demo.hello_world
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World! (example)"

  /persistance:
    get:
      summary: Increases and show persistant count
      description: Increases the internal counter in the persistant object. Note that this object is only persistant within the process. It is not persisted across restarts.
      operationId: api.demo.persistance_get
      responses:
        200:
          description: response with count
          content:
            text/plain:
              schema:
                type: integer
                example: 42

  /greeting/{name}:
    get:
      summary: Generate greeting
      description: Generates a greeting message.
      operationId: api.demo.post_greeting
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello dave!"
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          schema:
            type: string
            example: "dave"

  /greetteammember/{name}:
    get:
      summary: Greet team member.
      description: Generates a greeting message to predefined member.
      operationId: api.demo.post_teamgreeting
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "hello mat!"
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the person to greet.
          schema:
            $ref: "#components/schemas/teammember"
  /order:
    post:
      summary: Order an item.
      description: Generates an order.
      operationId: api.demo.add_order
      responses:
        201:
          description: order response
          content:
            text/plain:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Order"
  /secret/usingapikey:
    get:
      summary: Return secret string protected by a token
      operationId: api.demo.get_secret
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - api_key: []
  /secret/usingbasicauth:
    get:
      summary: Return secret string protected by a token
      description: |
        This secret is protected by username/password. Use admin/secret for the correct creds. 
        Alternatively foo/bar can be used as a user without the correct permissions for the "secrets" scope.
      operationId: api.demo.get_secret_basicauth
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - basic: ['secrets']

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Auth
      in: header
      x-apikeyInfoFunc: api.demo.apikey_auth
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: api.demo.basic_auth
  schemas:
    teammember:
      type: string
      enum: 
        - "zjel"
        - "jj"
        - "sam"
        - "mat"
        - "manu"
        - "georges"
      example: sam
    Order:
      type: object
      properties:
        requester-id:
          $ref: "#components/schemas/User ID"
        items:
          type: array
          items:
            $ref: "#components/schemas/Order Header"
    Order Header:
      type: object
      properties:
        allOf:
          oneOf:
            - $ref: "#components/schemas/VM Order Item"
            - $ref: "#components/schemas/DB Order Item"
        owner-id:
          $ref: "#components/schemas/User ID"
        owner-mail:
          $ref: "#components/schemas/User Mail"
        deputy-id:
          $ref: "#components/schemas/User ID"
        deputy-mail:
          $ref: "#components/schemas/User Mail"
        sbu:
          $ref: "#components/schemas/SBU"
    DB Order Item:
      type: object
      properties:
        catalog-reference:
          oneOf:
            - $ref: "#components/schemas/DB PG Catalog Reference"
        size:
          $ref: "#components/schemas/DB Size"
        metal-category:
          $ref: "#components/schemas/DB Metal Category"
        environment:
          $ref: "#components/schemas/Environment"
        security-zone:
          $ref: "#components/schemas/Security Zone"
      example: >
        {
          "items": [
            {
              "deputy-id": "b123456",
              "deputy-mail": "b123456@js.on",
              "owner-id": "b123456",
              "owner-mail": "b123456@js.on",
              "sbu": "CH",
              "catalog-reference": "PGSQL01",
              "size": "S1",
              "metal-category": "B",
              "environment": "Test",
              "security-zone": "_Z1",
              "group-permissions": [
                {
                  "ad-group-name": "f_adm",
                  "local-group-name": "wheel"
                }
              ],
              "data-disk": {
                "filesystem": "/data",
                "size-gb": 1
              }
            }
          ],
          "requester-id": "b123456"
        }
    VM Order Item:
      type: object
      properties:
        catalog-reference:
          oneOf:
            - $ref: "#components/schemas/VM Lin Catalog Reference"
            - $ref: "#components/schemas/VM Win Catalog Reference"
        size:
          $ref: "#components/schemas/VM Size"
        role:
          $ref: "#components/schemas/VM Role"
        metal-category:
          $ref: "#components/schemas/VM Metal Category"
        environment:
          $ref: "#components/schemas/Environment"
        application-id:
          $ref: "#components/schemas/Application ID"
        security-zone:
          $ref: "#components/schemas/Security Zone"
        group-permissions:
          type: array
          items:
            $ref: "#components/schemas/Permission Map"
        data-disk:
          $ref: "#components/schemas/VM Data Disk"
      example: >
        {
          "items": [
            {
              "deputy-id": "b123456",
              "deputy-mail": "b123456@js.on",
              "owner-id": "b123456",
              "owner-mail": "b123456@js.on",
              "sbu": "BE",
              "catalog-reference": "L01",
              "size": "S1",
              "metal-category": "B",
              "environment": "Test",
              "security-zone": "_Z1",
              "group-permissions": [
                {
                  "ad-group-name": "f_adm",
                  "local-group-name": "wheel"
                }
              ],
              "data-disk": {
                "filesystem": "/data",
                "size-gb": 1
              }
            }
          ],
          "requester-id": "b123456"
        }
    VM Size:
      type: string
      enum:
        - S1
        - M1
        - M2
        - L1
        - L2
        - X1
      example: "{ \"size\": \"S1\" }"
    User ID:
      type: string
      pattern: "^[bB][0-9]{6}$"
    User Mail:
      type: string
      pattern: "[^@ \t\r\n]+@[^@ \t\r\n]+\\.[^@ \t\r\n]+"
    SBU:
      type: string
      enum: 
        - BE
        - CH-BCH
        - CH-SOB
        - DE
        - LI
        - LU-RED
        - LU-YELLOW
        - SHARED
    DB PG Catalog Reference:
      type: string
      enum:
        - PGSQL01
        - PGSQL02
        - PGSQL03
        - PGSQL04
    VM Lin Catalog Reference:
      type: string
      enum:
        - L01
        - L02
    VM Win Catalog Reference:
      type: string
      enum:
        - W01
        - W02
    VM Role:
      type: string
      enum:
        - APP
        - WEB
        - DB
    VM Metal Category:
        type: string
        enum:
          - B
          - S
          - G
          - GP
    VM Data Disk:
      type: object
      required:
        - filesystem
        - size-gb
      properties:
        filesystem:
          type: string
          pattern: "^(?!/boot|/dev|/dev/.*|/run$)/.*$"
        size-gb:
          type: integer
          minimum: 1
    DB Metal Category:
        type: string
        enum:
          - B
          - S
          - G
          - GP
    DB Size:
      type: string
      enum:
        - S1
        - M1
        - M2
        - L1
        - L2
        - X1
    Environment:
        type: string
        enum:
          - Dev
          - Test
          - Int
          - Acc
          - Prod
    Application ID:
      type: string
      enum:
        - APP
        - DB
        - WEB
    Security Zone:
      type: string
      enum:
        - _Z1
        - _Z2
    Permission Map:
      type: object
      required:
        - ad-group-name
        - local-group-name
      properties:
        ad-group-name:
          type: string
        local-group-name:
          type: stringG