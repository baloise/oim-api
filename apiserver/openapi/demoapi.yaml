openapi: "3.0.0"

info:
  title: OpenAPI Demo
  version: "1.0"
servers:
  - url: /v1.0

paths:
  /hello:
    get:
      summary: Greet world
      description: Greets the world with a predefined message.
      operationId: api.demo.hello_world
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World! (example)"

  /persistance:
    get:
      summary: Increases and show persistant count
      description: Increases the internal counter in the persistant object. Note that this object is only persistant within the process. It is not persisted across restarts.
      operationId: api.demo.persistance_get
      responses:
        200:
          description: response with count
          content:
            text/plain:
              schema:
                type: integer
                example: 42

  /greeting/{name}:
    get:
      summary: Generate greeting
      description: Generates a greeting message.
      operationId: api.demo.post_greeting
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello dave!"
      parameters:
        - name: name
          in: path
          description: Name of the person to greet.
          required: true
          schema:
            type: string
            example: "dave"

  /greetteammember/{name}:
    get:
      summary: Greet team member.
      description: Generates a greeting message to predefined member.
      operationId: api.demo.post_teamgreeting
      responses:
        200:
          description: greeting response
          content:
            text/plain:
              schema:
                type: string
                example: "hello mat!"
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the person to greet.
          schema:
            $ref: "#/components/schemas/teammember"
  /secret/usingapikey:
    get:
      summary: Return secret string protected by a preshared, static token
      operationId: api.demo.get_secret
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - api_key: []
  /secret/usingbasicauth:
    get:
      summary: Return secret string protected by a token
      description: |
        This secret is protected by username/password. Use admin/secret for the correct creds. 
        Alternatively foo/bar can be used as a user without the correct permissions for the "secrets" scope.
      operationId: api.demo.get_secret_basicauth
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - basic: ['secrets']
  /secret/usingbearer:
    get:
      summary: Return secret string protected by a bearer token
      operationId: api.demo.get_secret_bearer
      responses:
        '200':
          description: secret response
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: Unauthorized
      security:
        - bearer_auth: []

components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      x-bearerInfoFunc: auth.bearer_auth
    api_key:
      type: apiKey
      name: X-Auth
      in: header
      x-apikeyInfoFunc: api.demo.apikey_auth
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: api.demo.basic_auth
  schemas:
    teammember:
      type: string
      enum: 
        - "zjel"
        - "jj"
        - "sam"
        - "mat"
        - "manu"
        - "georges"
      example: sam
